@page "/ChatPage"
@using ChatSystem.JsInterop
@inject NavigationManager navigationManager
@inject MqttJsInterop mqttInterop

<div class="container">
    <div class="row mx-lg-n5">
        <div class="col py-3 px-lg-5 border bg-light">
            Enter your name: <input type="text" disabled="@(IsDisabled)" @bind="@Name" />
        </div>
    </div>
    <div class="row mx-lg-n5">
        <div class="col py-3 px-lg-5">
            <button class="btn btn-primary btn-sm" @onclick="@CreateClientAndConnect" disabled="@(IsDisabled)">Connect</button>
            <button class="btn btn-danger btn-sm" @onclick="@Disconnect" disabled="@(!IsDisabled)">Disconnect</button>
        </div>
    </div>
    <div class="row mx-lg-n5">
        <div class="col py-3 px-lg-5">
            <p>Connection Status: <strong>@ConnectionStatus</strong></p>
        </div>
    </div>
    <div class="input-group mb-3">
        <input type="text" class="form-control" placeholder="Type your message here" @bind="@Message" disabled="@(!IsDisabled)" />
        <div class="input-group-append">
            <button class="btn btn-outline-secondary" type="button" @onclick="@PublishMessage" disabled="@(!IsDisabled)">Send</button>
        </div>
    </div>
    <div class="row">
        @if (rabbitData == null && rabbitData?.Count != 0)
        {
            <p><em>No Messages...</em></p>
        }
        else
        {
            <div id="scrollbox">

                @foreach (var data in rabbitData)
                {
                    <div class="received">
                        <div class="user">@data.Received</div>
                        <div class="msg">@data.Data</div>
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {

    private const string _rabbitMQHost = "localhost";
    private const int _rabbitMQPort = 15675;

    private const string _rabbitMQUsername = "guest";
    private const string _rabbitMQPassword = "guest";
    private const string _topic = "chatroom";

    private List<PayloadData> rabbitData { get; set; }
    private string ConnectionStatus { get; set; }
    private string Name { get; set; } = $"User1";
    private bool IsDisabled { get; set; }
    private string Message { get; set; }

    protected override void OnInitialized()
    {
        ConnectionStatus = "Not connected";

        OnConnectionChanged.Action = value =>
        {
            ConnectionStatus = $"{value}";
            StateHasChanged();
        };

        OnMessageReceived.Action = (key, data) =>
        {
            if (rabbitData == null)
            {
                rabbitData = new List<PayloadData>();
            }

            var rabbitDataItem = new PayloadData(key, data);
            rabbitData.Insert(0, rabbitDataItem);

            StateHasChanged();
        };
    }

    public void CreateClientAndConnect()
    {
        IsDisabled = true;
        StateHasChanged();

        mqttInterop.CreateClient(wsHost: _rabbitMQHost, wsPort: _rabbitMQPort, clientId: Name);
        mqttInterop.Connect(topic: _topic, qos: 1, timeout: 3, username: _rabbitMQUsername, password: _rabbitMQPassword);
    }

    public void Disconnect()
    {
        mqttInterop.Disconnect();
        IsDisabled = false;
        StateHasChanged();
    }

    public void PublishMessage()
    {
        if (!string.IsNullOrWhiteSpace(Message))
        {
            string payload = $"{Name} : {Message}";
            mqttInterop.Publish(topic: _topic, payload: payload, qos: 0, retained: false);
            Message = null;
            StateHasChanged();
        }
    }

    class PayloadData
    {
        private string Key { get; set; }
        public string Data { get; set; }
        public string Received { get; set; }

        public PayloadData(string key, string data)
        {
            Key = key;
            Data = data;
            Received = DateTime.Now.ToString("HH:mm:ss");
        }
    }
}